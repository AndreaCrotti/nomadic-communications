h1. DESCRIPTION

This project is about testing network performances with different wireless devices and configurations.
Using wireless devices is not mandatory of course, in this configuration we analyze the output of "iperf":http://sourceforge.net/projects/iperf , so any kind of network testing can be automated.

Results are then statistically analyzed and there will be 2 relations (written in latex) explaining the results.

The main __idea__ behind the program is the concept of configuration, which is basically an __ini__ file containing different sections and values for each of them.
Values can be:
* lists (speed = 1M, 2M)
* constants (host = server)
* ranges (rts_threshold = 256..1000)

Configurations are kind of complex dictionaries built parsing the __ini__ files where a basic arithmetic is defined.
You can merge them together (+) or get their difference (-) obtaining new configurations (both or them are NOT commutative).

For every test there is basically a three step merge: <br>
_default.ini_ + _user.ini_ + _test.ini_

After this merge we have the full configuration which is then executed and which results are further analyzed.


h1. USAGE

To run the program check that the file _tester.py_ is executable and simply run.
*./tester.py <user>*<br>
where *user* is represents a user configuration contained in the directory *userconfs*.

h2. Batch mode

So in order to use this program you need to
* Configure correcly __default.ini__ for your setup
* run __./tester.py__ (you may need to run __chmod u+x tester.py__ before to make it executable)
* follow the instructions

h2. Manual mode

Another possible way to use the program is to pass all the config files as arguments, running

__./tester.py__ [conf1] [conf2] ...
will load all the configuration files and start the test.

When the actual test is started (iperf being executed) if you think you made something wrong you can send a SIGKILL (ctrl-c) signal to the program.
It will ask you if you want to skip that test quit everything or redo it, by default it restarts from the last test, it's the best behaviour because the last test is useless once stopped

h2. Simulation

There is also a simulation flag (-s) which is useful to see what it will be really executed.
The configuration shown for every group is the difference from the previous one, in this way it's easily clear what parameter you have to change.

The program doesn't show all the useless parameters (but they are still stored for every test) like ssid, ip or driver for that card