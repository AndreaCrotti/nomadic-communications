h1. DESCRIPTION

This project is about testing network performances with different wireless devices and configurations.

Results are then statistically analyzed and there will be 2 relations (written in latex) explaining the results.

The main __idea__ behind the program is the concept of configuration, which is basically an __ini__ file containing different sections and values for each of them.
Values can
* lists (speed = 1M, 2M)
* constants (host = server)
* ranges (rts_threshold = 256..1000)

Configurations are kind of complex dictionaries built parsing the __ini__ files where a basic arithmetic is defined.
You can merge them together (+) or get their difference (-) obtaining new configurations (both or them are NOT commutative).

The program first imports the default configuration, which contains all the possible values that I may set, then a user defined configuration.

h1. USAGE

This program first load the default configuration from __config.ini__ and then all the __*.ini__ files found in the __configs__ folder.
The configuration are merged and loaded in a big list, which is analyzed and resorted in order to need the minimal human input as possible.

The list is in fact divided in sublists which contain configurations which different only by parameter than can be set automatically by the program itself (in this moment just "iperf").

After having loaded all the configurations it starts to execute them, waiting for the user confirmation when needed and store the results to a database file (using shelve).

Note that the values that you can put inside your configuration files must be also contained in the config.ini (as lists or singleton).
Otherwise the file will not be loaded and an error will be printed, this is done to avoid typos.

Data are also plotted after being generated, but the plot is just for instant visualization, and can be redraw much better in the phase of the analysis of the results.
During the execution of the program, the output of iperf is also stored on files in __iperf_out__ using the same codename, useful to double check for possible parsing errors later.

It is important to store as much as informations (valuable informations of course) as possible, in this way we have more material to work with after.

It would also be nice to have a sample of traffic dump for every test effectuated.

h2. Batch mode

So in order to use this program you need to
* Configure correcly __config.ini__ for your setup
* run __./tester.py__ (you may need to run __chmod u+x tester.py__ before to make it executable)
* follow the instructions

h2. Manual mode

Another possible way to use the program is to pass all the config files as arguments, running

__./tester.py__ [conf1] [conf2] ...
will load all the configuration files and start the test.

When the actual test is started (iperf being executed) if you think you made something wrong you can send a SIGKILL (ctrl-c) signal to the program.
It will ask you if you want to skip that test quit everything or redo it, by default it restarts from the last test, it's the best behaviour because the last test is useless once stopped

h2. Simulation

There is also a simulation flag (-s) which is useful to see what it will be really executed.
The configuration shown for every group is the difference from the previous one, in this way it's easily clear what parameter you have to change.

The program doesn't show all the useless parameters (but they are still stored for every test) like ssid, ip or driver for that card